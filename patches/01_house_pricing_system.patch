diff --git a/include/global.h b/include/global.h
index 1234567..8901234 100644
--- a/include/global.h
+++ b/include/global.h
@@ -1100,6 +1100,7 @@ struct SaveBlock1
     /*0x2730*/ u8 playerBerryPatch;
     /*0x2731*/ u8 eggIncubatorSteps;
     /*0x2732*/ u16 evEditorCredits[NUM_STATS];
+    /*0x2734*/ u8 playerHouseType;
 } __attribute__((packed));
 
 extern struct SaveBlock1 *gSaveBlock1Ptr;
diff --git a/include/secret_base.h b/include/secret_base.h
index 1234567..8901234 100644
--- a/include/secret_base.h
+++ b/include/secret_base.h
@@ -18,4 +18,16 @@ void TrySetCurSecretBaseIndex(void);
 void CheckPlayerHasSecretBase(void);
 void ToggleSecretBaseEntranceMetatile(void);
 
+// House type system
+enum HouseType
+{
+    HOUSE_APARTMENT,
+    HOUSE_HOUSE, 
+    HOUSE_MANSION,
+    NUM_HOUSE_TYPES
+};
+
+// House type cost functions
+bool8 CanAffordHouseType(u8 houseType);
+void ChargeForHouseType(u8 houseType);
 #endif //GUARD_SECRET_BASE_H
diff --git a/src/secret_base.c b/src/secret_base.c
index 1234567..8901234 100644
--- a/src/secret_base.c
+++ b/src/secret_base.c
@@ -45,6 +45,7 @@
 #include "constants/songs.h"
 #include "constants/trainers.h"
+#include "money.h"
 
 #define TAG_SCROLL_ARROW 5112
 
@@ -1234,4 +1235,25 @@ void Function_Name(void)
 
     sInFriendSecretBase = FALSE;
 }
+
+// House type cost system
+static const u32 sHouseTypeCosts[NUM_HOUSE_TYPES] = {
+    [HOUSE_APARTMENT] = 25000,
+    [HOUSE_HOUSE]     = 100000,
+    [HOUSE_MANSION]   = 500000,
+};
+
+bool8 CanAffordHouseType(u8 houseType)
+{
+    if (houseType >= NUM_HOUSE_TYPES)
+        return FALSE;
+    u32 cost = sHouseTypeCosts[houseType];
+    return IsEnoughMoney(&gSaveBlock1Ptr->money, cost);
+}
+
+void ChargeForHouseType(u8 houseType)
+{
+    if (houseType >= NUM_HOUSE_TYPES)
+        return;
+    u32 cost = sHouseTypeCosts[houseType];
+    if (IsEnoughMoney(&gSaveBlock1Ptr->money, cost))
+    {
+        RemoveMoney(&gSaveBlock1Ptr->money, cost);
+    }
+}